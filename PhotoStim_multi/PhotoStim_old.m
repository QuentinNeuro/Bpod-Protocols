%%% Bpod Session Protocol %%%
global BpodSystem
evalin('base', 'PulsePal')
%% ---------------------------------------- Load Matrix and Matrix Attribs
MaxTrials = 2000;
loadBpodPath
SessionPath = BpodSystem.SettingsPath;
%%%
load(SessionPath); % Creates local variable SessionSettings
SessionMatrix = SessionSettings.SessionMatrix;
% Checks to see if there is a stimuli definition. If not, create an empty.
try
    Stimuli = SessionSettings.Stimuli;
catch
    Stimuli = cell(1);
end
% Find the number of blocks
nBlocks = size(SessionMatrix, 3);
% Find number of trial types
for x = 1:nBlocks
    Temp = SessionMatrix(:,3,x);
    nTrialTypes(x) = length(cell2mat(Temp(2:length(Temp))));
end
%---------------------------------------- /Load Matrix and Matrix Attribs


%% ---------------------------------------- DEFINE TRIAL TYPES
%%% Create a 1xn cell array called "TrialTypes" with each cell containing a vector with the order of trial types for that block in the session.
%%% For instance, if you defined 2 blocks with 2 trialtypes in the session editor, this might look
%%% like TrialTypes{1} = [1 1 2 2 1 2]; TrialTypes{2} = [2 1 1 2 1 2];
%%% Trial types are referenced by their decimal index defined in the
%%% appropriate block in the session editor. The length of the vector you
%%% generate defines the length of the block.

% This example makes all trials equally probable and randomly interleaved,
% with block length of 100 trials
% BlockLength = 100;
% for x = 1:nBlocks
% TrialTypes{x} = ceil(rand(1,BlockLength)*nTrialTypes(x));
% end

BlockLength = MaxTrials;
numTrialTypes = 4;
trial_vector = [1 2 3 4];
%trial_vector = [2 2 2 2];

for x = 1:nBlocks
    %TrialTypes{x} = ceil(rand(1,BlockLength)*numTrialTypes);
    TrialTypes{x} = repmat(trial_vector, 1, MaxTrials/length(trial_vector));
end

%---------------------------------------- /DEFINE TRIAL TYPES



%% ---------------------------------------- DEFINE BLOCK ORDER
%%% Create a vector called "BlockOrder" with the order of blocks to be
%%% presented in the session. The order of blocks is repeating (i.e. if
%%% BlockOrder = [1 2] Bpod will repeat the sequence Block1 Block2 until MaxTrials.

% This example makes all blocks play repeatedly, in order.
% BlockOrder = 1:nBlocks;
BlockOrder = 1:nBlocks;
%---------------------------------------- /DEFINE BLOCK ORDER


%% Pre-compute trial parameters from Session Matrix %%%

TrialParams = ReadSessionMatrix(SessionMatrix, TrialTypes, BlockOrder, MaxTrials);


%% ---------------------------------------- MAIN LOOP
StimBNC = 1;

%ValveDurations = GetValveTimes(Reward, [1]);
DIO = DIOmap;
TE = struct;

nStartedTrials = 0;
TrialInBlock = 0;
CurrentBlock = BlockOrder(1);
BlockOrderPos = 1;

InitialDelay = 1500;

while BpodSystem.BeingUsed == 1
    
    % Update trial number and switch block if necessary
    nStartedTrials = nStartedTrials + 1;
    TrialInBlock = TrialInBlock + 1;
    [CurrentBlock TrialInBlock BlockOrderPos] = BlockSwitchEval(TrialInBlock, TrialTypes, BlockOrder, BlockOrderPos);
    %
    
    %---------------------------------------- /DEFINE TRIAL TYPES
    % Light-pulse train : 0.5 duration 3ms pulse width
    if TrialTypes{1}(nStartedTrials) == 1
        load('C:\Bpod\Protocols\PhotoStim\LightTrain_10Hz_5ms');
        ProgramPulsePal(ParameterMatrix);
    elseif TrialTypes{1}(nStartedTrials) == 2
        load('C:\Bpod\Protocols\PhotoStim\LightTrain_20Hz_5ms');
        ProgramPulsePal(ParameterMatrix);
    elseif TrialTypes{1}(nStartedTrials) == 3
        load('C:\Bpod\Protocols\PhotoStim\LightTrain_40Hz_5ms');
        ProgramPulsePal(ParameterMatrix);
    elseif TrialTypes{1}(nStartedTrials) == 4
        load('C:\Bpod\Protocols\PhotoStim\LightTrain_80Hz_5ms');
        ProgramPulsePal(ParameterMatrix);
    end
    
    
    %------------------------------- OVERRIDE SCRIPT-----------------------
    % Here, change pre-computed trial parameters on the fly by modifying
    % the TrialParams struct at position CurrentBlock / nDoneTrials. The
    % override script for the protocol is defined in the session editor.
    [TrialParams TrialTypes BlockOrder CurrentBlock, SessionMatrix, TE] = ProtocolOverride(TrialParams, TrialTypes, BlockOrder, CurrentBlock, nStartedTrials, TrialInBlock, TE, SessionMatrix, MaxTrials);
    %------------------------------- /OVERRIDE SCRIPT----------------------
    
    % Update live plots
    UpdateLiveDisplay_PhotoStim(TE, TrialParams, TrialTypes, BlockOrder, CurrentBlock, nStartedTrials, TrialInBlock, SessionMatrix, MaxTrials);
    
    % Send Sounds to Sound S_hperver, Update TESLA module & Adjust Olfactometer Flowrates
    UpdateBpodComponents(TrialParams, TrialTypes, CurrentBlock, TrialInBlock, nStartedTrials, Stimuli);
    
    % Generate this trial's state matrix from TrialParams
    %sma = TrialParams2StateMatrix(TrialParams, Stimuli, TrialInBlock, CurrentBlock);
    % make your own state matrix
    sma = NewStateMatrix();
    
%     sma = AddState(sma, 'name', 'dummy1', ...
%         'self_timer', 0,...
%         'input_to_statechange', ...
%         {'Tup', 'dummy2'},...
%         'output_actions', {});
%     sma = AddState(sma, 'name', 'dummy2', ...
%         'self_timer', 0,...
%         'input_to_statechange', ...
%         {'Tup', 'dummy3'},...
%         'output_actions', {});
%     sma = AddState(sma, 'name', 'dummy3', ...
%         'self_timer', 0,...
%         'input_to_statechange', ...
%         {'Tup', 'dummy4'},...
%         'output_actions', {});
%     sma = AddState(sma, 'name', 'dummy4', ...
%         'self_timer', 0,...
%         'input_to_statechange', ...
%         {'Tup', 'dummy5'},...
%         'output_actions', {});
%     sma = AddState(sma, 'name', 'dummy5', ...
%         'self_timer', 0,...
%         'input_to_statechange', ...
%         {'Tup', 'dummy6'},...
%         'output_actions', {});
%     sma = AddState(sma, 'name', 'dummy6', ...
%         'self_timer', 0,...
%         'input_to_statechange', ...
%         {'Tup', 'dummy7'},...
%         'output_actions', {});
%     sma = AddState(sma, 'name', 'dummy7', ...
%         'self_timer', 0,...
%         'input_to_statechange', ...
%         {'Tup', 'dummy8'},...
%         'output_actions', {});
%     sma = AddState(sma, 'name', 'dummy8', ...
%         'self_timer', 0,...
%         'input_to_statechange', ...
%         {'Tup', 'dummy9'},...
%         'output_actions', {});
%     sma = AddState(sma, 'name', 'dummy9', ...
%         'self_timer', 0,...
%         'input_to_statechange', ...
%         {'Tup', 'dummy10'},...
%         'output_actions', {});
%     sma = AddState(sma, 'name', 'dummy10', ...
%         'self_timer', 0,...
%         'input_to_statechange', ...
%         {'Tup', 'dummy11'},...
%         'output_actions', {});
%     sma = AddState(sma, 'name', 'dummy11', ...
%         'self_timer', 0,...
%         'input_to_statechange', ...
%         {'Tup', 'dummy12'},...
%         'output_actions', {});
%     sma = AddState(sma, 'name', 'dummy12', ...
%         'self_timer', 0,...
%         'input_to_statechange', ...
%         {'Tup', 'dummy13'},...
%         'output_actions', {});
%     sma = AddState(sma, 'name', 'dummy13', ...
%         'self_timer', 0,...
%         'input_to_statechange', ...
%         {'Tup', 'dummy14'},...
%         'output_actions', {});
%     sma = AddState(sma, 'name', 'dummy14', ...
%         'self_timer', 0,...
%         'input_to_statechange', ...
%         {'Tup', 'dummy15'},...
%         'output_actions', {});
%     sma = AddState(sma, 'name', 'dummy15', ...
%         'self_timer', 0,...
%         'input_to_statechange', ...
%         {'Tup', 'dummy16'},...
%         'output_actions', {});
%     sma = AddState(sma, 'name', 'dummy16', ...
%         'self_timer', 0,...
%         'input_to_statechange', ...
%         {'Tup', 'dummy17'},...
%         'output_actions', {});
%     sma = AddState(sma, 'name', 'dummy17', ...
%         'self_timer', 0,...
%         'input_to_statechange', ...
%         {'Tup', 'dummy18'},...
%         'output_actions', {});
%     sma = AddState(sma, 'name', 'dummy18', ...
%         'self_timer', 0,...
%         'input_to_statechange', ...
%         {'Tup', 'dummy19'},...
%         'output_actions', {});
%     sma = AddState(sma, 'name', 'dummy19', ...
%         'self_timer', 0,...
%         'input_to_statechange', ...
%         {'Tup', 'dummy20'},...
%         'output_actions', {});
%     sma = AddState(sma, 'name', 'dummy20', ...
%         'self_timer', 0,...
%         'input_to_statechange', ...
%         {'Tup', 'InitialDelay'},...
%         'output_actions', {});
%     
%     
    sma = AddState(sma, 'name', 'InitialDelay', ...
        'self_timer', InitialDelay,...
        'input_to_statechange', ...
        {'Tup', 'DeliverStimulus'},...
        'output_actions', {});
    
    sma = AddState(sma, 'name', 'DeliverStimulus', ...
        'self_timer', 500,...
        'input_to_statechange', ...
        {'Tup', 'final_state'},...
        'output_actions', {'BNCout', StimBNC});
    
    sma = AddState(sma, 'name', 'MadeWithEditor', ...
        'self_timer', 0,...
        'input_to_statechange', ...
        {'Tup', 'final_state'},...
        'output_actions', {});
    
    
    
    % Send the state matrix
    SendStateMatrix(sma);
    % Run the state matrix and return raw data
    [RawTrialEvents] = RunStateMatrix();
    % Compute parsed data (all fields for Trial-Events format)
    TE = AddTrialEvents_PhotoStim(TE, RawTrialEvents, TrialParams, TrialTypes, TrialInBlock, CurrentBlock, SessionSettings);
    
    % Save the data to the session data file
    
    save(BpodSystem.DataPath, 'TE');
    
end

%---------------------------------------- /MAIN LOOP